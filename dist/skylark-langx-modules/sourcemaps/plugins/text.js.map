{"version":3,"sources":["plugins/text.js"],"names":["define","module","modular","text","fs","Cc","Ci","xpcIsWindows","progIds","xmlRegExp","bodyRegExp","hasLocation","location","href","defaultProtocol","protocol","replace","defaultHostName","hostname","defaultPort","port","undefined","buildMap","masterConfig","config","plugins","strip","content","matches","match","jsEscape","createXhr","xhr","i","progId","XMLHttpRequest","ActiveXObject","e","parseName","name","modName","ext","temp","index","indexOf","isRelative","substring","length","moduleName","xdRegExp","useXhr","url","uProtocol","uHostName","uPort","exec","split","toLowerCase","finishLoad","onLoad","isBuild","load","req","inlineText","parsed","nonStripName","toUrl","get","err","error","write","pluginName","hasOwnProperty","asModule","writeFile","extPart","fileName","value","textWrite","contents","env","process","versions","node","require","nodeRequire","callback","errback","file","readFileSync","headers","header","open","setRequestHeader","onXhr","onreadystatechange","evt","status","readyState","Error","responseText","onXhrComplete","send","Packages","java","stringBuffer","line","io","File","lineSeparator","lang","System","getProperty","input","BufferedReader","InputStreamReader","FileInputStream","StringBuffer","readLine","charAt","append","String","toString","close","Components","classes","interfaces","utils","inStream","convertStream","fileObj","readData","FileUtils","createInstance","nsIFileInputStream","init","nsIConverterInputStream","available","DEFAULT_REPLACEMENT_CHARACTER","readString","path"],"mappings":"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","file":"../../plugins/text.js","sourcesContent":["define([\r\n    'module',\r\n    \"../modular\"\r\n], function (module,modular) {\r\n    'use strict';\r\n\r\n    var text, fs, Cc, Ci, xpcIsWindows,\r\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\r\n        xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\r\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\r\n        hasLocation = typeof location !== 'undefined' && location.href,\r\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\:/, ''),\r\n        defaultHostName = hasLocation && location.hostname,\r\n        defaultPort = hasLocation && (location.port || undefined),\r\n        buildMap = {},\r\n        masterConfig = (module.config && module.config()) || {};\r\n\r\n    text = modular.plugins.text = {\r\n        ///version: '2.0.12',\r\n\r\n        strip: function (content) {\r\n            //Strips <?xml ...?> declarations so that external SVG and XML\r\n            //documents can be added to a document without worry. Also, if the string\r\n            //is an HTML document, only the part inside the body tag is returned.\r\n            if (content) {\r\n                content = content.replace(xmlRegExp, \"\");\r\n                var matches = content.match(bodyRegExp);\r\n                if (matches) {\r\n                    content = matches[1];\r\n                }\r\n            } else {\r\n                content = \"\";\r\n            }\r\n            return content;\r\n        },\r\n\r\n        jsEscape: function (content) {\r\n            return content.replace(/(['\\\\])/g, '\\\\$1')\r\n                .replace(/[\\f]/g, \"\\\\f\")\r\n                .replace(/[\\b]/g, \"\\\\b\")\r\n                .replace(/[\\n]/g, \"\\\\n\")\r\n                .replace(/[\\t]/g, \"\\\\t\")\r\n                .replace(/[\\r]/g, \"\\\\r\")\r\n                .replace(/[\\u2028]/g, \"\\\\u2028\")\r\n                .replace(/[\\u2029]/g, \"\\\\u2029\");\r\n        },\r\n\r\n        createXhr: masterConfig.createXhr || function () {\r\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\r\n            var xhr, i, progId;\r\n            if (typeof XMLHttpRequest !== \"undefined\") {\r\n                return new XMLHttpRequest();\r\n            } else if (typeof ActiveXObject !== \"undefined\") {\r\n                for (i = 0; i < 3; i += 1) {\r\n                    progId = progIds[i];\r\n                    try {\r\n                        xhr = new ActiveXObject(progId);\r\n                    } catch (e) {}\r\n\r\n                    if (xhr) {\r\n                        progIds = [progId];  // so faster next time\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return xhr;\r\n        },\r\n\r\n        /**\r\n         * Parses a resource name into its component parts. Resource names\r\n         * look like: module/name.ext!strip, where the !strip part is\r\n         * optional.\r\n         * @param {String} name the resource name\r\n         * @returns {Object} with properties \"moduleName\", \"ext\" and \"strip\"\r\n         * where strip is a boolean.\r\n         */\r\n        parseName: function (name) {\r\n            var modName, ext, temp,\r\n                strip = false,\r\n                index = name.indexOf(\".\"),\r\n                isRelative = name.indexOf('./') === 0 ||\r\n                             name.indexOf('../') === 0;\r\n\r\n            if (index !== -1 && (!isRelative || index > 1)) {\r\n                modName = name.substring(0, index);\r\n                ext = name.substring(index + 1, name.length);\r\n            } else {\r\n                modName = name;\r\n            }\r\n\r\n            temp = ext || modName;\r\n            index = temp.indexOf(\"!\");\r\n            if (index !== -1) {\r\n                //Pull off the strip arg.\r\n                strip = temp.substring(index + 1) === \"strip\";\r\n                temp = temp.substring(0, index);\r\n                if (ext) {\r\n                    ext = temp;\r\n                } else {\r\n                    modName = temp;\r\n                }\r\n            }\r\n\r\n            return {\r\n                moduleName: modName,\r\n                ext: ext,\r\n                strip: strip\r\n            };\r\n        },\r\n\r\n        xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\r\n\r\n        /**\r\n         * Is an URL on another domain. Only works for browser use, returns\r\n         * false in non-browser environments. Only used to know if an\r\n         * optimized .js version of a text resource should be loaded\r\n         * instead.\r\n         * @param {String} url\r\n         * @returns Boolean\r\n         */\r\n        useXhr: function (url, protocol, hostname, port) {\r\n            var uProtocol, uHostName, uPort,\r\n                match = text.xdRegExp.exec(url);\r\n            if (!match) {\r\n                return true;\r\n            }\r\n            uProtocol = match[2];\r\n            uHostName = match[3];\r\n\r\n            uHostName = uHostName.split(':');\r\n            uPort = uHostName[1];\r\n            uHostName = uHostName[0];\r\n\r\n            return (!uProtocol || uProtocol === protocol) &&\r\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\r\n                   ((!uPort && !uHostName) || uPort === port);\r\n        },\r\n\r\n        finishLoad: function (name, strip, content, onLoad) {\r\n            content = strip ? text.strip(content) : content;\r\n            if (masterConfig.isBuild) {\r\n                buildMap[name] = content;\r\n            }\r\n            onLoad(content);\r\n        },\r\n\r\n        load: function (name, req, onLoad, config) {\r\n            //Name has format: some.module.filext!strip\r\n            //The strip part is optional.\r\n            //if strip is present, then that means only get the string contents\r\n            //inside a body tag in an HTML string. For XML/SVG content it means\r\n            //removing the <?xml ...?> declarations so the content can be inserted\r\n            //into the current doc without problems.\r\n\r\n            // Do not bother with the work if a build and text will\r\n            // not be inlined.\r\n            if (config && config.isBuild && !config.inlineText) {\r\n                onLoad();\r\n                return;\r\n            }\r\n\r\n            masterConfig.isBuild = config && config.isBuild;\r\n\r\n            var parsed = text.parseName(name),\r\n                nonStripName = parsed.moduleName +\r\n                    (parsed.ext ? '.' + parsed.ext : ''),\r\n                url = req.toUrl(nonStripName),\r\n                useXhr = (masterConfig.useXhr) ||\r\n                         text.useXhr;\r\n\r\n            // Do not load if it is an empty: url\r\n            if (url.indexOf('empty:') === 0) {\r\n                onLoad();\r\n                return;\r\n            }\r\n\r\n            //Load the text. Use XHR if possible and in a browser.\r\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\r\n                text.get(url, function (content) {\r\n                    text.finishLoad(name, parsed.strip, content, onLoad);\r\n                }, function (err) {\r\n                    if (onLoad.error) {\r\n                        onLoad.error(err);\r\n                    }\r\n                });\r\n            } else {\r\n                //Need to fetch the resource across domains. Assume\r\n                //the resource has been optimized into a JS module. Fetch\r\n                //by the module name + extension, but do not include the\r\n                //!strip part to avoid file system issues.\r\n                req([nonStripName], function (content) {\r\n                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,\r\n                                    parsed.strip, content, onLoad);\r\n                });\r\n            }\r\n        },\r\n\r\n        write: function (pluginName, moduleName, write, config) {\r\n            if (buildMap.hasOwnProperty(moduleName)) {\r\n                var content = text.jsEscape(buildMap[moduleName]);\r\n                write.asModule(pluginName + \"!\" + moduleName,\r\n                               \"define(function () { return '\" +\r\n                                   content +\r\n                               \"';});\\n\");\r\n            }\r\n        },\r\n\r\n        writeFile: function (pluginName, moduleName, req, write, config) {\r\n            var parsed = text.parseName(moduleName),\r\n                extPart = parsed.ext ? '.' + parsed.ext : '',\r\n                nonStripName = parsed.moduleName + extPart,\r\n                //Use a '.js' file name so that it indicates it is a\r\n                //script that can be loaded across domains.\r\n                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';\r\n\r\n            //Leverage own load() method to load plugin value, but only\r\n            //write out values that do not have the strip argument,\r\n            //to avoid any potential issues with ! in file names.\r\n            text.load(nonStripName, req, function (value) {\r\n                //Use own write() method to construct full module value.\r\n                //But need to create shell that translates writeFile's\r\n                //write() to the right interface.\r\n                var textWrite = function (contents) {\r\n                    return write(fileName, contents);\r\n                };\r\n                textWrite.asModule = function (moduleName, contents) {\r\n                    return write.asModule(moduleName, fileName, contents);\r\n                };\r\n\r\n                text.write(pluginName, nonStripName, textWrite, config);\r\n            }, config);\r\n        }\r\n    };\r\n\r\n    if (masterConfig.env === 'node' || (!masterConfig.env &&\r\n            typeof process !== \"undefined\" &&\r\n            process.versions &&\r\n            !!process.versions.node &&\r\n            !process.versions['node-webkit'])) {\r\n        //Using special require.nodeRequire, something added by r.js.\r\n        fs = require.nodeRequire('fs');\r\n\r\n        text.get = function (url, callback, errback) {\r\n            try {\r\n                var file = fs.readFileSync(url, 'utf8');\r\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\r\n                if (file.indexOf('\\uFEFF') === 0) {\r\n                    file = file.substring(1);\r\n                }\r\n                callback(file);\r\n            } catch (e) {\r\n                if (errback) {\r\n                    errback(e);\r\n                }\r\n            }\r\n        };\r\n    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&\r\n            text.createXhr())) {\r\n        text.get = function (url, callback, errback, headers) {\r\n            var xhr = text.createXhr(), header;\r\n            xhr.open('GET', url, true);\r\n\r\n            //Allow plugins direct access to xhr headers\r\n            if (headers) {\r\n                for (header in headers) {\r\n                    if (headers.hasOwnProperty(header)) {\r\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Allow overrides specified in config\r\n            if (masterConfig.onXhr) {\r\n                masterConfig.onXhr(xhr, url);\r\n            }\r\n\r\n            xhr.onreadystatechange = function (evt) {\r\n                var status, err;\r\n                //Do not explicitly handle errors, those should be\r\n                //visible via console output in the browser.\r\n                if (xhr.readyState === 4) {\r\n                    status = xhr.status || 0;\r\n                    if (status > 399 && status < 600) {\r\n                        //An http 4xx or 5xx error. Signal an error.\r\n                        err = new Error(url + ' HTTP status: ' + status);\r\n                        err.xhr = xhr;\r\n                        if (errback) {\r\n                            errback(err);\r\n                        }\r\n                    } else {\r\n                        callback(xhr.responseText);\r\n                    }\r\n\r\n                    if (masterConfig.onXhrComplete) {\r\n                        masterConfig.onXhrComplete(xhr, url);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(null);\r\n        };\r\n    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&\r\n            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {\r\n        //Why Java, why is this so awkward?\r\n        text.get = function (url, callback) {\r\n            var stringBuffer, line,\r\n                encoding = \"utf-8\",\r\n                file = new java.io.File(url),\r\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\r\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\r\n                content = '';\r\n            try {\r\n                stringBuffer = new java.lang.StringBuffer();\r\n                line = input.readLine();\r\n\r\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\r\n                // http://www.unicode.org/faq/utf_bom.html\r\n\r\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\r\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\r\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\r\n                    // Eat the BOM, since we've already found the encoding on this file,\r\n                    // and we plan to concatenating this buffer with others; the BOM should\r\n                    // only appear at the top of a file.\r\n                    line = line.substring(1);\r\n                }\r\n\r\n                if (line !== null) {\r\n                    stringBuffer.append(line);\r\n                }\r\n\r\n                while ((line = input.readLine()) !== null) {\r\n                    stringBuffer.append(lineSeparator);\r\n                    stringBuffer.append(line);\r\n                }\r\n                //Make sure we return a JavaScript string and not a Java string.\r\n                content = String(stringBuffer.toString()); //String\r\n            } finally {\r\n                input.close();\r\n            }\r\n            callback(content);\r\n        };\r\n    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&\r\n            typeof Components !== 'undefined' && Components.classes &&\r\n            Components.interfaces)) {\r\n        //Avert your gaze!\r\n        Cc = Components.classes;\r\n        Ci = Components.interfaces;\r\n        Components.utils['import']('resource://gre/modules/FileUtils.jsm');\r\n        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);\r\n\r\n        text.get = function (url, callback) {\r\n            var inStream, convertStream, fileObj,\r\n                readData = {};\r\n\r\n            if (xpcIsWindows) {\r\n                url = url.replace(/\\//g, '\\\\');\r\n            }\r\n\r\n            fileObj = new FileUtils.File(url);\r\n\r\n            //XPCOM, you so crazy\r\n            try {\r\n                inStream = Cc['@mozilla.org/network/file-input-stream;1']\r\n                           .createInstance(Ci.nsIFileInputStream);\r\n                inStream.init(fileObj, 1, 0, false);\r\n\r\n                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']\r\n                                .createInstance(Ci.nsIConverterInputStream);\r\n                convertStream.init(inStream, \"utf-8\", inStream.available(),\r\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\r\n\r\n                convertStream.readString(inStream.available(), readData);\r\n                convertStream.close();\r\n                inStream.close();\r\n                callback(readData.value);\r\n            } catch (e) {\r\n                throw new Error((fileObj && fileObj.path || '') + ': ' + e);\r\n            }\r\n        };\r\n    }\r\n    return text;\r\n});\r\n"]}